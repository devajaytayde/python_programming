>>> contact = {('Ajay',9730,37,'Pune'), ('Rakhi', 9922,  31, 'Raver')
...
... }
 
>>> len(contact)
2

>>> contact = {'Lead':('Ram',97301234561,37,'Kharadi'), 'Associate Lead':('Anup', 9861231112,  31, 'Kothrud')}
 
>>> contact['Lead']
('Ram', 97301234561, 37, 'Kharadi')
>>> contact['Associate Lead']
('Anup', 9861231112, 31, 'Kothrud')
 
>>> del contact['Lead']
>>> contact
{'Associate Lead': ('Anup', 9861231112, 31, 'Kothrud')}

>>> help()
Welcome to Python 3.13's help utility! If this is your first time using
Python, you should definitely check out the tutorial at
https://docs.python.org/3.13/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To get a list of available
modules, keywords, symbols, or topics, enter "modules", "keywords",
"symbols", or "topics".

Each module also comes with a one-line summary of what it does; to list
the modules whose name or summary contain a given string such as "spam",
enter "modules spam".

To quit this help utility and return to the interpreter,
enter "q", "quit" or "exit".

help> dict
Help on class dict in module builtins:

class dict(object)
 |  dict() -> new empty dictionary
 |  dict(mapping) -> new dictionary initialized from a mapping object's
 |      (key, value) pairs
 |  dict(iterable) -> new dictionary initialized as if via:
 |      d = {}
 |      for k, v in iterable:
 |          d[k] = v
 |  dict(**kwargs) -> new dictionary initialized with the name=value pairs
 |      in the keyword argument list.  For example:  dict(one=1, two=2)
 |
 |  Methods defined here:
 |
 |  __contains__(self, key, /)
 |      True if the dictionary has the specified key, else False.
 |
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |
 |  __eq__(self, value, /)
 |      Return self==value.
 |
 |  __ge__(self, value, /)
 |      Return self>=value.
 |
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |
 |  __getitem__(self, key, /)
 |      Return self[key].
 |
 |  __gt__(self, value, /)
 |      Return self>value.
 |
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  __ior__(self, value, /)
 |      Return self|=value.
 |
 |  __iter__(self, /)
 |      Implement iter(self).
 |
 |  __le__(self, value, /)
 |      Return self<=value.
 |
 |  __len__(self, /)
 |      Return len(self).
 |
 |  __lt__(self, value, /)
 |      Return self<value.
 |
 |  __ne__(self, value, /)
 |      Return self!=value.
 |
 |  __or__(self, value, /)
 |      Return self|value.
 |
 |  __repr__(self, /)
 |      Return repr(self).
 |
 |  __reversed__(self, /)
 |      Return a reverse iterator over the dict keys.
 |
 |  __ror__(self, value, /)
 |      Return value|self.
 |
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |
 |  __sizeof__(self, /)
 |      Return the size of the dict in memory, in bytes.
 |
 |  clear(self, /)
 |      Remove all items from the dict.
 |
 |  copy(self, /)
 |      Return a shallow copy of the dict.
 |
 |  get(self, key, default=None, /)
 |      Return the value for key if key is in the dictionary, else default.
 |
 |  items(self, /)
 |      Return a set-like object providing a view on the dict's items.
 |
 |  keys(self, /)
 |      Return a set-like object providing a view on the dict's keys.
 |
 |  pop(self, key, default=<unrepresentable>, /)
 |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
 |
 |      If the key is not found, return the default if given; otherwise,
 |      raise a KeyError.
 |
 |  popitem(self, /)
 |      Remove and return a (key, value) pair as a 2-tuple.
 |
 |      Pairs are returned in LIFO (last-in, first-out) order.
 |      Raises KeyError if the dict is empty.
 |
 |  setdefault(self, key, default=None, /)
 |      Insert key with a value of default if key is not in the dictionary.
 |
 |      Return the value for key if key is in the dictionary, else default.
 |
 |  update(...)
 |      D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
 |      If E is present and has a .keys() method, then does:  for k in E.keys(): D[k] = E[k]
 |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
 |      In either case, this is followed by: for k in F:  D[k] = F[k]
 |
 |  values(self, /)
 |      Return an object providing a view on the dict's values.
 |
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |
 |  __class_getitem__(object, /)
 |      See PEP 585
 |
 |  fromkeys(iterable, value=None, /)
 |      Create a new dictionary with keys from iterable and values set to value.
 |
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |
 |  __new__(*args, **kwargs)
 |      Create and return a new object.  See help(type) for accurate signature.
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |
 |  __hash__ = None

  
>>> contact.items()
dict_items([('Associate Lead', ('Anup', 9861231112, 31, 'Kothrud'))])
 
>>> contact.keys()
dict_keys(['Associate Lead'])

>>> contact.values()
dict_values([('Anup', 9861231112, 31, 'Kothrud')])

  
>>> contact.get(1)
>>> contact.get(9)
>>> contact.get(0)
>>> contact.get('Associate Lead')
('Anup', 9861231112, 31, 'Kothrud')
  
>>> contact.clear()
>>> contact
{}
>>> contact = {'Lead':('Ram',97301234561,37,'Kharadi'), 'Associate Lead':('Anup', 9861231112,  31, 'Kothrud'), 'Associate',('Pallavi',8822882288,30,'Pashan'}

>>> backup_contact = {'Sr Lead':('John',97301234561,47,'Kharadi'), 'Jr Lead':('Swaroop', 9861231112,  31, 'Kothrud'),'Lead':('Ram',97301234561,37,'Kharadi')}

 
>>> contact.update(backup_contact)

>>> contact
{'Lead': ('Ram', 97301234561, 37, 'Kharadi'), 'Associate Lead': ('Anup', 9861231112, 31, 'Kothrud'), 'Associate': ('Pallavi', 8822882288, 30, 'Pashan'), 'Sr Lead': ('John', 97301234561, 47, 'Kharadi'), 'Jr Lead': ('Swaroop', 9861231112, 31, 'Kothrud')}



